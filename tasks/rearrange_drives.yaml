---
# Extremely not idempotent step by step but should have consistent results if run in full

- name: Move optical drives to end of alphabet
  ansible.windows.win_shell: |
    Get-WMIObject -Class Win32_CDROMDrive  -ErrorAction Stop | ForEach-Object {
      # Get volume object for drive
      $CurrentDriveLetter = $_.drive
      $volume = Get-WMIObject -Class Win32_Volume -Filter "DriveLetter='$CurrentDriveLetter'" -ErrorAction Stop

      # Find first free drive letter backwards from Z:
      $NewDriveLetter = Get-ChildItem function:[d-z]: -Name | Where-Object { (New-Object System.IO.DriveInfo($_)).DriveType -eq 'NoRootDirectory' } | Sort-Object -Descending | Select-Object -First 1

      # Reassign volume to new drive letter
      Set-WMIInstance -InputObject $volume -Arguments @{DriveLetter=$NewDriveLetter} -ErrorAction Stop
    }

- name: Assign hard drives as per specficiation
  when: rearrange_drives
  ansible.windows.win_shell: |
    Get-WMIObject -Class Win32_Volume -Filter "Label='{{ drive.label }}'" -ErrorAction Stop |
      Set-WMIInstance -Arguments @{DriveLetter="{{ drive.letter }}"} -ErrorAction Stop
  loop: "{{ drive_configuration }}"
  loop_control:
    loop_var: drive

- name: Rearrange optical drives after hard drives
  when: rearrange_drives
  ansible.windows.win_shell: |
    # Find drive letter for final hard drive
    $LastHardDrive = (Get-Volume | Where-Object {$_.DriveType -eq "Fixed"} | Sort-Object -Property DriveLetter | Select-Object -Last 1).DriveLetter

    Get-WMIObject -Class Win32_CDROMDrive -ErrorAction Stop | ForEach-Object {
      # Get volume object for drive
      $CurrentDriveLetter = $_.drive
      $volume = Get-WMIObject -Class Win32_Volume -Filter "DriveLetter='$CurrentDriveLetter'" -ErrorAction Stop

      # Find first free drive letter after final hard drive
      $NewDriveLetter = Get-ChildItem function:[$LastHardDrive-z]: -Name | Where-Object { (New-Object System.IO.DriveInfo($_)).DriveType -eq 'NoRootDirectory' } | Select-Object -First 1

      # Reassign volume to new drive letter
      Set-WMIInstance -InputObject $volume -Arguments @{DriveLetter=$NewDriveLetter} -ErrorAction Stop
    }
